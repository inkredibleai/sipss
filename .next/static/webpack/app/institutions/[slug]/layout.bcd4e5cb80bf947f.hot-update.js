"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/institutions/[slug]/layout",{

/***/ "(app-pages-browser)/./lib/supabase/queries.ts":
/*!*********************************!*\
  !*** ./lib/supabase/queries.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAchiever: () => (/* binding */ createAchiever),\n/* harmony export */   createCareerResource: () => (/* binding */ createCareerResource),\n/* harmony export */   createPaper: () => (/* binding */ createPaper),\n/* harmony export */   createQuickUpdate: () => (/* binding */ createQuickUpdate),\n/* harmony export */   deleteAchiever: () => (/* binding */ deleteAchiever),\n/* harmony export */   deleteCareerResource: () => (/* binding */ deleteCareerResource),\n/* harmony export */   deletePaper: () => (/* binding */ deletePaper),\n/* harmony export */   deleteQuickUpdate: () => (/* binding */ deleteQuickUpdate),\n/* harmony export */   getAllAchievers: () => (/* binding */ getAllAchievers),\n/* harmony export */   getCareerResources: () => (/* binding */ getCareerResources),\n/* harmony export */   getFeaturedAchievers: () => (/* binding */ getFeaturedAchievers),\n/* harmony export */   getFeaturedMedia: () => (/* binding */ getFeaturedMedia),\n/* harmony export */   getInstitutions: () => (/* binding */ getInstitutions),\n/* harmony export */   getMediaByCategory: () => (/* binding */ getMediaByCategory),\n/* harmony export */   getPapers: () => (/* binding */ getPapers),\n/* harmony export */   getQuickUpdates: () => (/* binding */ getQuickUpdates),\n/* harmony export */   incrementPaperDownload: () => (/* binding */ incrementPaperDownload),\n/* harmony export */   incrementResourceViews: () => (/* binding */ incrementResourceViews),\n/* harmony export */   updateAchiever: () => (/* binding */ updateAchiever),\n/* harmony export */   updateCareerResource: () => (/* binding */ updateCareerResource),\n/* harmony export */   updatePaper: () => (/* binding */ updatePaper),\n/* harmony export */   updateQuickUpdate: () => (/* binding */ updateQuickUpdate)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(app-pages-browser)/./lib/supabase/client.ts\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./server */ \"(app-pages-browser)/./lib/supabase/server.ts\");\n\n\n// Achievers\nasync function getFeaturedAchievers() {\n    try {\n        const { data, error } = await _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"achievers\").select(\"\\n        *,\\n        institutions (name, code)\\n      \").eq(\"featured\", true).eq(\"status\", \"active\").order(\"created_at\", {\n            ascending: false\n        }).limit(6);\n        if (error) {\n            console.error(\"Error fetching featured achievers:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching featured achievers:\", error);\n        return [];\n    }\n}\nasync function getAllAchievers(filters) {\n    try {\n        let query = _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"achievers\").select(\"\\n        *,\\n        institutions (name, code)\\n      \").eq(\"status\", \"active\");\n        if (filters === null || filters === void 0 ? void 0 : filters.category) {\n            query = query.eq(\"category\", filters.category);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.year) {\n            query = query.eq(\"year\", filters.year);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.institution) {\n            query = query.eq(\"institution_id\", filters.institution);\n        }\n        const { data, error } = await query.order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching achievers:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching achievers:\", error);\n        return [];\n    }\n}\n// Papers\nasync function getPapers(filters) {\n    try {\n        let query = _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"papers\").select(\"*\").eq(\"status\", \"active\");\n        if (filters === null || filters === void 0 ? void 0 : filters.type) {\n            query = query.eq(\"type\", filters.type);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.class) {\n            query = query.eq(\"class\", filters.class);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.subject) {\n            query = query.eq(\"subject\", filters.subject);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.year) {\n            query = query.eq(\"year\", filters.year);\n        }\n        const { data, error } = await query.order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching papers:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching papers:\", error);\n        return [];\n    }\n}\nasync function incrementPaperDownload(paperId) {\n    try {\n        const { error } = await _client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"increment_paper_downloads\", {\n            paper_id: paperId\n        });\n        if (error) {\n            console.error(\"Error incrementing paper downloads:\", error);\n        }\n    } catch (error) {\n        console.error(\"Error incrementing paper downloads:\", error);\n    }\n}\n// Career Resources\nasync function getCareerResources(filters) {\n    try {\n        let query = _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"career_resources\").select(\"*\").eq(\"status\", \"active\");\n        if (filters === null || filters === void 0 ? void 0 : filters.category) {\n            query = query.eq(\"category\", filters.category);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.type) {\n            query = query.eq(\"type\", filters.type);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.difficulty) {\n            query = query.eq(\"difficulty\", filters.difficulty);\n        }\n        const { data, error } = await query.order(\"views\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching career resources:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching career resources:\", error);\n        return [];\n    }\n}\nasync function incrementResourceViews(resourceId) {\n    try {\n        const { error } = await _client__WEBPACK_IMPORTED_MODULE_0__.supabase.rpc(\"increment_resource_views\", {\n            resource_id: resourceId\n        });\n        if (error) {\n            console.error(\"Error incrementing resource views:\", error);\n        }\n    } catch (error) {\n        console.error(\"Error incrementing resource views:\", error);\n    }\n}\n// Quick Updates\nasync function getQuickUpdates(institutionId) {\n    try {\n        let query = _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"quick_updates\").select(\"*\").eq(\"status\", \"active\").order(\"priority\", {\n            ascending: false\n        }).order(\"created_at\", {\n            ascending: false\n        }).limit(10);\n        if (institutionId) {\n            // Use proper UUID comparison\n            query = query.or(\"institution_id.eq.\".concat(institutionId, \",and(show_on_main.eq.true,institution_id.neq.\").concat(institutionId, \")::uuid\"));\n        } else {\n            // For main site - show updates with no institution_id or updates marked to show on main\n            query = query.or('institution_id.is.null,show_on_main.eq.true');\n        }\n        const { data, error } = await query;\n        if (error) {\n            console.error(\"Error fetching quick updates:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching quick updates:\", error);\n        return [];\n    }\n}\n// Institutions\nasync function getInstitutions() {\n    try {\n        // Removed the status filter since the column doesn't exist\n        const { data, error } = await _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"institutions\").select(\"*\").order(\"name\");\n        if (error) {\n            console.error(\"Error fetching institutions:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching institutions:\", error);\n        return [];\n    }\n}\n// Media Gallery\nasync function getFeaturedMedia() {\n    try {\n        const { data, error } = await _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"media_gallery\").select(\"*\").eq(\"featured\", true).eq(\"status\", \"active\").order(\"created_at\", {\n            ascending: false\n        }).limit(6);\n        if (error) {\n            console.error(\"Error fetching featured media:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching featured media:\", error);\n        return [];\n    }\n}\nasync function getMediaByCategory(category) {\n    try {\n        const { data, error } = await _client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"media_gallery\").select(\"*\").eq(\"category\", category).eq(\"status\", \"active\").order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching media by category:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error fetching media by category:\", error);\n        return [];\n    }\n}\n// Admin functions (using service role)\nasync function createAchiever(achieverData) {\n    try {\n        // First create the achiever\n        const { data: newAchiever, error: createError } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"achievers\").insert(achieverData).select('id').single();\n        if (createError) {\n            console.error(\"Error creating achiever:\", createError);\n            throw createError;\n        }\n        // Then fetch the full achiever data including the institution\n        const { data: fullAchiever, error: fetchError } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"achievers\").select(\"\\n        *,\\n        institutions (name, code)\\n      \").eq('id', newAchiever.id).single();\n        if (fetchError) {\n            console.error(\"Error fetching created achiever:\", fetchError);\n            throw fetchError;\n        }\n        return fullAchiever;\n    } catch (error) {\n        console.error(\"Error in createAchiever:\", error);\n        throw error;\n    }\n}\nasync function updateAchiever(id, updates) {\n    try {\n        // First update the achiever\n        const { error: updateError } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"achievers\").update(updates).eq(\"id\", id);\n        if (updateError) {\n            console.error(\"Error updating achiever:\", updateError);\n            throw updateError;\n        }\n        // Then fetch the full updated achiever data including the institution\n        const { data: updatedAchiever, error: fetchError } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"achievers\").select(\"\\n        *,\\n        institutions (name, code)\\n      \").eq('id', id).single();\n        if (fetchError) {\n            console.error(\"Error fetching updated achiever:\", fetchError);\n            throw fetchError;\n        }\n        return updatedAchiever;\n    } catch (error) {\n        console.error(\"Error in updateAchiever:\", error);\n        throw error;\n    }\n}\nasync function deleteAchiever(id) {\n    try {\n        const { error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"achievers\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Error deleting achiever:\", error);\n            throw error;\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Error in deleteAchiever:\", error);\n        throw error;\n    }\n}\nasync function createPaper(paper) {\n    try {\n        const { data, error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"papers\").insert(paper).select().single();\n        if (error) {\n            console.error(\"Error creating paper:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error creating paper:\", error);\n        throw error;\n    }\n}\nasync function updatePaper(id, updates) {\n    try {\n        const { data, error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"papers\").update(updates).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Error updating paper:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error updating paper:\", error);\n        throw error;\n    }\n}\nasync function deletePaper(id) {\n    try {\n        const { error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"papers\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Error deleting paper:\", error);\n            throw error;\n        }\n    } catch (error) {\n        console.error(\"Error deleting paper:\", error);\n        throw error;\n    }\n}\nasync function createCareerResource(resource) {\n    try {\n        const { data, error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"career_resources\").insert(resource).select().single();\n        if (error) {\n            console.error(\"Error creating career resource:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error creating career resource:\", error);\n        throw error;\n    }\n}\nasync function updateCareerResource(id, updates) {\n    try {\n        const { data, error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"career_resources\").update(updates).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Error updating career resource:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error updating career resource:\", error);\n        throw error;\n    }\n}\nasync function deleteCareerResource(id) {\n    try {\n        const { error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"career_resources\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Error deleting career resource:\", error);\n            throw error;\n        }\n    } catch (error) {\n        console.error(\"Error deleting career resource:\", error);\n        throw error;\n    }\n}\nasync function createQuickUpdate(update) {\n    try {\n        const { data, error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"quick_updates\").insert(update).select().single();\n        if (error) {\n            console.error(\"Error creating quick update:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error creating quick update:\", error);\n        throw error;\n    }\n}\nasync function updateQuickUpdate(id, updates) {\n    try {\n        const { data, error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"quick_updates\").update(updates).eq(\"id\", id).select().single();\n        if (error) {\n            console.error(\"Error updating quick update:\", error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error updating quick update:\", error);\n        throw error;\n    }\n}\nasync function deleteQuickUpdate(id) {\n    try {\n        const { error } = await _server__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"quick_updates\").delete().eq(\"id\", id);\n        if (error) {\n            console.error(\"Error deleting quick update:\", error);\n            throw error;\n        }\n    } catch (error) {\n        console.error(\"Error deleting quick update:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase/queries.ts\n"));

/***/ })

});